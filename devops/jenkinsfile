pipeline {
    agent any
    parameters {
		//string(name: 'fname', defaultValue: 'not specified', description: 'First Name')
		string(name: 'product', defaultValue: 'not specified', description: 'No Product Specified')
		string(name: 'clientid', defaultValue: 'not specified', description: 'Client Id for which the build will be processed')
		string(name: 'clientdir', defaultValue: 'clientdir', description: 'Directory of client')
		string(name: 'credentialkey', defaultValue: 'Not available', description: 'Credential of user')
		string(name: 'gitrepourl', defaultValue: 'Not available', description: 'Directory of client')

		string(name: 'target_environment', defaultValue: 'NotAvailable', description: 'Target Environment - Dev, SIT, UAT or Prod')
		string(name: 'business_scenario_name', defaultValue: 'NotAvailable', description: 'Business Secenario Name')
		string(name: 'project_id', defaultValue: 'Project_NA', description: 'Project ID')
		string(name: 'build_initiating_user_id', defaultValue: 'NA_user_id', description: 'Buld Initiating User ID')
		string(name: 'business_scenario_name', defaultValue: 'NA_scenarioname', description: 'Buld Initiating User ID')
				
		string(name: 'event_publishing_endpoint', defaultValue: 'EndPoint_Not_Aailable', description: 'Event Publishing URL')

		
    }
    environment {
        builddir = "${params.clientid}"
		gitclientdir =  "/${params.clientdir}"
		clientdir =  "${params.clientdir}"
        credentialkey = "${params.credentialkey}"
		gitrepourl =  "${params.gitrepourl}"
		reportZipFile = "package.zip"
		
    }
    stages {
	
	
        stage('Function-Test') {
            steps {
                echo "Hello ${params.fname}"
                echo "Product: ${params.product}"
				
				sendEventNotification("TaskName_My",1, 
                           0,"Testing no task Reason Code",
						   "No Message Available","Not Aborted")
             }
        }
    }

    post {
        // Always runs. And it runs before any of the other post conditions.
        //always {
            // Let's wipe out the workspace before we finish!
        //    deleteDir()
        //}
        success {
            sendEmail("Successful");
        }
        unstable {
            sendEmail("Unstable");
        }
        failure {
            sendEmail("Failed");
        }
    }

// The options directive is for configuration that applies to the whole job.
    options {
        // For example, we'd like to make sure we only keep 10 builds at a time, so
        // we don't fill up our storage!
        buildDiscarder(logRotator(numToKeepStr: '5'))

        // And we'd really like to be sure that this build doesn't hang forever, so
        // let's time it out after an hour.
        timeout(time: 25, unit: 'MINUTES')
    }	
}


// get change log to be send over the mail
@NonCPS
def getChangeString() {
    MAX_MSG_LEN = 100
    def changeString = ""

    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " - ${truncated_msg} [${entry.author}]\n"
		}
    }
}

def sendEmail(status) {
   echo "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})"
   echo "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})"
   echo "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" 
  
  //  mail(
  //          to: "$EMAIL_RECIPIENTS",
  //          subject: "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})",
  //          body: "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + "\n")
}

def buildJsonStr(taskName,taskSeqNumber,
                           taskCompletionCode,taskReasonCode,
						   taskMessage,taskAborted){
		    echo "AAAAAAAAAAAAAA"

   def taskDateTime=new Date()
    def taskId=UUID.randomUUID().toString()

		    echo "BBBBBBBBBBBBB"

	 def dataStruct = [
              'taskId' : taskId,
              'taskSequenceNumber' : taskSeqNumber,
			  'totalTasksCount' : 9,
			  'taskName' : taskName,
			  'taskDateTime' : taskDateTime,
			  'buildId': "${BUILD_ID}",
			  'targetEnvironment' : "${params.target_environment}",
			  'productName': "${params.product}",
			  'serviceName' : "${params.business_scenario_name}",
			  'projectId' : "${params.project_id}",
			  'clientCode' : "${params.clientid}", 
			  'buildInitiatingUserId' : "${params.build_initiating_user_id}",
			  'taskLog' : taskCompletionCode,
			  'taskReasonCode': taskReasonCode,
			  'taskMessage' : taskMessage,
			  'tasksAborted' : taskAborted
     ]
	 
	 def json = new groovy.json.JsonBuilder(dataStruct)

		    echo "CCCCCCCCCCCCCCCCCC"
	 
	 return json.toString()
}


def sendEventNotification(taskName,taskSeqNumber, 
                           taskCompletionCode,taskReasonCode,
						   taskMessage,taskAborted){
	 
	 script {
	    echo "in send event Notification"
	    final String jsonData = buildJsonStr(taskName,taskSeqNumber, 
                           taskCompletionCode,taskReasonCode,
						   taskMessage,taskAborted) 

		//echo jsonData
	 }
}
