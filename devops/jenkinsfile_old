pipeline {
    agent any
    parameters {
		//string(name: 'fname', defaultValue: 'not specified', description: 'First Name')
		string(name: 'product', defaultValue: 'not specified', description: 'No Product Specified')
		string(name: 'clientid', defaultValue: 'not specified', description: 'Client Id for which the build will be processed')
		string(name: 'clientdir', defaultValue: 'clientdir', description: 'Directory of client')
		string(name: 'credentialkey', defaultValue: 'Not available', description: 'Credential of user')
		string(name: 'gitrepourl', defaultValue: 'Not available', description: 'Directory of client')
		
		string(name: 'event_publishing_endpoint', defaultValue: 'Not available', description: 'Event Publishing URL')

		
    }
    environment {
        builddir = "${params.clientid}"
		gitclientdir =  "/${params.clientdir}"
		clientdir =  "${params.clientdir}"
        credentialkey = "${params.credentialkey}"
		gitrepourl =  "${params.gitrepourl}"
		reportZipFile = "package.zip"
		
    }
    stages {
	
	    stage('Clone sources') {
		    steps {
                echo "Clone Source and Checking out $builddir and client dir is $clientdir"
				
				./devops/check_params.sh
				
			//	git url: 'https://github.com/vndube/testnewrepo.git'
				
				sh 'mkdir -p ' + builddir
				script{
				    
					def paths = [["path":"${gitclientdir}"],["path": "/tars"]]
					dir(builddir) {
						checkout([$class: 'GitSCM', 
						   branches: [[name: '*/master']], 
						   doGenerateSubmoduleConfigurations: false, 
						   extensions: [
								[$class: 'SparseCheckoutPaths',
								 sparseCheckoutPaths: paths
								]
	//                  		  [$class: 'SparseCheckoutPath', path: gitclientdir, path: '/tars' ]
	//							 sparseCheckoutPaths: [[path: gitclientdir],[path: '/tars']]
								], 
						   submoduleCfg: [], 
						   userRemoteConfigs: [[  credentialsId: credentialkey, url: gitrepourl]]])

	//					   userRemoteConfigs: [[  credentialsId: 'e8f3366fe2096f77c2c0d27b3b0331ffd5eb2c4e', url: 'https://github.com/vndube/testnewrepo.git']]])
					}
				}
		    }
		}

	    //example to to push bar file to Git
        stage('Collect Reports') {
            steps {
   			   echo "Reports directory: ${workspace}/${builddir}${clientdir}"
			   // Create a zip file of content in the workspace
			   dir("${builddir}") {
			        sh 'mkdir -pv tars'
					dir("${clientdir}") {
					   echo 'current dir is $pwd'
					   //sh 'echo "Hey I am at build no.  $BUILD_NUMBER">>currentBuildfile' 
					   sh 'tar -cvf ../tars/package'+clientdir+'.tar .'
				    }
					dir("${clientdir}@tmp") {
					   deleteDir()
					}
					sh '''
					git init
					git add .
					if ! git commit -m "adding package.tar"|grep -i "nothing to commit\\|no changes added"; 
					then
					    echo "pushing tar file"
						git push origin HEAD:master
					fi
					'''
				}
			}
        }		
        stage('Example') {
            steps {
                echo "Hello ${params.fname}"
                echo "Product: ${params.product}"
             }
        }
    }

    post {
        // Always runs. And it runs before any of the other post conditions.
        //always {
            // Let's wipe out the workspace before we finish!
        //    deleteDir()
        //}
        success {
            sendEmail("Successful");
        }
        unstable {
            sendEmail("Unstable");
        }
        failure {
            sendEmail("Failed");
        }
    }

// The options directive is for configuration that applies to the whole job.
    options {
        // For example, we'd like to make sure we only keep 10 builds at a time, so
        // we don't fill up our storage!
        buildDiscarder(logRotator(numToKeepStr: '5'))

        // And we'd really like to be sure that this build doesn't hang forever, so
        // let's time it out after an hour.
        timeout(time: 25, unit: 'MINUTES')
    }	
}


// get change log to be send over the mail
@NonCPS
def getChangeString() {
    MAX_MSG_LEN = 100
    def changeString = ""

    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += " - ${truncated_msg} [${entry.author}]\n"
		}
    }
}

def sendEmail(status) {
   echo "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})"
   echo "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})"
   echo "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" 
  
  //  mail(
  //          to: "$EMAIL_RECIPIENTS",
  //          subject: "Build $BUILD_NUMBER - " + status + " (${currentBuild.fullDisplayName})",
  //          body: "Changes:\n " + getChangeString() + "\n\n Check console output at: $BUILD_URL/console" + "\n")
}

def buildJsonStr(task_name,task_sequence_number){
    def task_dateTime=new Date()
    def task_id=UUID.randomUUID().toString()

	 def dataStruct = [
              'taskId' : task_id,
              'taskSequenceNumber' : task_sequence_number,
			  'totalTasksCount' : 9,
			  'taskName' : task_name,
			  'taskDateTime' : task_dateTime,
			  'buildId': "${BUILD_ID}",
			  'targetEnvironment' : ${target_environment},
			  'productName': ${product_name},
			  'serviceName' : ${business_scenario_name},
			  'projectId' : ${project_id},
			  'clientCode' : ${clientCode},
			  'buildInitiatingUserId' : ${build_initiating_user_id},
			  'taskLog' : ${taskCompletionCode},
			  'taskReasonCode': ${task_reason_code},
			  'taskMessage' : ${task_message},
			  'tasksAborted' : ${tasks_aborted}
     ]
	 
	 def json = new groovy.json.JsonBuilder(dataStruct)
	 
	 return json.toString()
}


def sendEventNotification(task_name,task_sequence_number){
	 
	 script {
	    final String jsonData = buildJsonStr(task_name,task_sequence_number) 
		final def (String response, int code) =
 		         sh(script: "curl --insecure -vs -X POST -w '\\n%{response_code}' ${event_publishing_endpoint} -H 'accept: application/json' -H 'Content-Type: application/json' -d ${jsonData}", returnStdout: true).trim().tokenize("\n")
		
//		echo response
		echo "HTTP response status code: $code"
        if (code == 200) {
               echo "Successfully published"
       }
		
	 }
}
